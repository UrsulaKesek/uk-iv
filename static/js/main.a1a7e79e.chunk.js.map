{"version":3,"sources":["components/Images/bottle.png","components/Images/bottlei.png","components/Perfume/index.jsx","components/Cart/index.jsx","components/Item/index.jsx","components/PerfumeList/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Perfume","item","description","image","price","addToCart","className","src","bottle","alt","required","type","min","max","label","onClick","Cart","name","subtotal","Item","update","bottlei","PerfumeList","listOfPerfumes","map","perfume","App","useState","id","perfumes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,mRC8B5BC,EA1BC,SAAC,GAOf,IANAC,EAMD,EANCA,KACAC,EAKD,EALCA,YACAC,EAID,EAJCA,MACAC,EAGD,EAHCA,MACAC,EAED,EAFCA,UAEC,OACC,4BACE,wBAAIC,UAAU,QAAQL,GACtB,wBAAIK,UAAU,SACXH,EACD,yBAAKI,IAAKC,IAAQC,IAAI,oBAExB,wBAAIH,UAAU,QAAQJ,GACtB,wBAAII,UAAU,SAAd,OAAwBF,GACxB,wBAAIE,UAAU,OAAd,OAEE,kBAAC,IAAD,CAAcA,UAAU,MAAMI,UAAQ,EAACC,KAAK,SAASC,IAAI,IAAIC,IAAI,MAAMC,MAAM,aAC7E,4BAAQR,UAAU,MAAMS,QAASV,GAAjC,kBCOOW,G,YA1BF,SAAC,GAAmC,IAAjCV,EAAgC,EAAhCA,UAAWW,EAAqB,EAArBA,KAAqB,EAAfC,SAC/B,OACE,yBAAKZ,UAAS,mBAAcA,EAAS,UAAMA,GAAc,KACvD,6BACE,6CACA,yBAAKA,UAAU,SACZW,EACD,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,yBAAKX,UAAU,cACb,yCACA,iDACA,uCAGF,yBAAKA,UAAU,YACb,gDACA,6CAEF,yBAAKA,UAAU,UAAf,c,gBCIOa,G,MAvBF,SAAC,GAAkC,IAAhChB,EAA+B,EAA/BA,MAAOc,EAAwB,EAAxBA,KAAMb,EAAkB,EAAlBA,MAAMgB,EAAY,EAAZA,OACjC,OACE,oCACA,yBAAKd,UAAU,kBACb,yBAAKA,UAAU,OACZH,EACD,yBAAKI,IAAKc,IAASZ,IAAI,oBAEvB,4BAAKQ,EAAL,iBACA,2BAAIb,EAAJ,cAEF,yBAAKE,UAAU,OACb,wBAAIA,UAAU,UAAUc,EAAxB,eACF,kBAAC,IAAD,CAAcd,UAAU,UAAUI,UAAQ,EAACC,KAAK,SAASC,IAAI,IAAIC,IAAI,MAAMC,MAAM,aAC/E,4BAAQR,UAAU,UAAlB,yBCIOgB,G,MAnBK,SAAC,GAAD,IAAGhB,EAAH,EAAGA,UAAWiB,EAAd,EAAcA,eAAd,OAClB,2BAAOjB,UAAS,2BAAsBA,EAAS,UAAMA,GAAc,KACjE,+BACE,4BACA,oCACA,qCACA,2CACA,qCACA,6CAGF,+BACCiB,EAAeC,KAAI,SAACC,GAAD,OAChB,kBAAC,EAAYA,UCqCNC,EAlDJ,WAAM,IAAD,EACKC,mBAAS,CAC1B,CACEC,GAAG,EACH3B,KAAM,SACNC,YACE,kFACFC,MAAO,GACPC,MAAO,SACPC,UAAW,IAEb,CACEuB,GAAG,EACH3B,KAAM,SACNC,YACE,oFACFC,MAAO,GACPC,MAAO,SACPC,UAAW,IAEb,CACEuB,GAAG,EACH3B,KAAM,SACNC,YACE,gFACFC,MAAO,GACPC,MAAO,SACPC,UAAW,IAEb,CACEuB,GAAG,EACH3B,KAAM,SACNC,YAAa,4DACbC,MAAO,GACPC,MAAO,SACPC,UAAW,MAlCRwB,EADO,oBAyCd,OACE,yBAAKvB,UAAU,OACb,+CACA,kBAAC,EAAD,CAAaiB,eAAgBM,IAC7B,kBAAC,EAAD,QCrCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a1a7e79e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bottle.372e4c21.png\";","module.exports = __webpack_public_path__ + \"static/media/bottlei.42b22a56.png\";","import React from \"react\";\nimport NumericInput from 'react-numeric-input'\nimport bottle from \"../Images/bottle.png\";\n\nconst Perfume = ({\n  item,\n  description,\n  image,\n  price,\n  addToCart\n}) =>\n { return (\n    <tr>\n      <td className=\"item\">{item}</td>\n      <td className=\"image\">\n        {image}\n        <img src={bottle} alt=\"perfume-bottle\" />\n      </td>\n      <td className=\"desc\">{description}</td>\n      <td className=\"price\">£{price}</td>\n      <td className=\"atc\">\n        QTY:\n        <NumericInput className=\"qty\" required type=\"number\" min=\"0\" max=\"100\" label=\"quantity\"/>\n        <button className=\"add\" onClick={addToCart}>\n          Add to Cart\n        </button>\n      </td>\n    </tr>\n  );\n};\nexport default Perfume;\n","import React from \"react\";\nimport \"./Cart.css\";\nimport { Item } from \"..\";\n\nconst Cart = ({ className, name, subtotal }) => {\n  return (\n    <div className={`cart-base${className ? `${className}` : \"\"}`}>\n      <div>\n        <h1>Items in Cart</h1>\n        <div className=\"items\">\n          {name}\n          <Item />\n          <Item />\n        </div>\n        <div className=\"cart-total\">\n          <h3>Subtotal:</h3>\n          <h3>Delivery Charges:</h3>\n          <h2>Total:</h2>\n        </div>\n\n        <div className=\"checkout\">\n          <span>Total price : </span>\n          <button>Checkout</button>\n        </div>\n        <div className=\"footer\">footer</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport NumericInput from 'react-numeric-input'\nimport bottlei from \"../Images/bottlei.png\";\nimport \"./Item.css\" \n\nconst Item = ({ image, name, price,update}) => {\n  return (\n    <>\n    <div className=\"cart-base-item\">\n      <div className=\"img\">\n        {image}\n        <img src={bottlei} alt=\"perfume-bottle\" />\n      </div>\n        <h2>{name}Scent 1:Poets</h2>\n        <p>{price}£185.00</p>\n\n      <div className=\"bin\">\n        <h2 className=\"update\">{update}Update Cart</h2>\n      <NumericInput className=\"cartqty\" required type=\"number\" min=\"1\" max=\"100\" label=\"quantity\"/>\n        <button className=\"remove\">\n          Remove from cart\n        </button>\n      </div>\n      </div>\n    </>\n  );\n};\n\nexport default Item;\n","import React from \"react\";\nimport './PerfumeList.css';\nimport {Perfume} from '..';\n\nconst PerfumeList = ({ className, listOfPerfumes }) => (\n  <table className={`perfume-list-base${className ? `${className}` : \"\"}`}>\n    <thead>\n      <tr>\n      <th>Item</th>\n      <th>Image</th>\n      <th>Description</th>\n      <th>Price</th>\n      <th>Add To Cart</th>\n      </tr>\n    </thead>\n    <tbody>\n    {listOfPerfumes.map((perfume)=>(\n        <Perfume {...perfume}/>\n    ))}\n    </tbody>\n  </table>\n);\n\nexport default PerfumeList;\n","import React,{useState} from \"react\";\nimport \"./App.css\";\nimport { PerfumeList,Cart} from \"./components\";\n\nconst App =() =>{\n  const [perfumes] = useState([\n    {\n      id:1,\n      item: \"Scent1\",\n      description:\n        \"Poets of Berlin:A blend of wild green orris,vanilla,blueberry,lemon and vetiver\",\n      image: \"\",\n      price: \"185.00\",\n      addToCart: \"\",\n    },\n    {\n      id:2,\n      item: \"Scent2\",\n      description:\n        \"Basso Continuo in Noto:A blend of Marsala cask whiskey,sandalwood,vetiver,leather\",\n      image: \"\",\n      price: \"145.00\",\n      addToCart: \"\",\n    },\n    {\n      id:3,\n      item: \"Scent3\",\n      description:\n        \"Toamasina Ensemble:An island blend of grapefruit,cardomom,vetiver and vanilla\",\n      image: \"\",\n      price: \"150.00\",\n      addToCart: \"\",\n    },\n    {\n      id:4,\n      item: \"Scent4\",\n      description: \"Jazz New York:A classic blend of patchouli,cedar and lime\",\n      image: \"\",\n      price: \"165.00\",\n      addToCart: \"\",\n    },\n  ]);\n\n\n  \n  return (\n    <div className=\"app\">\n      <h1>SCENT EXPLORERS</h1>\n      <PerfumeList listOfPerfumes={perfumes}/> \n      <Cart/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}